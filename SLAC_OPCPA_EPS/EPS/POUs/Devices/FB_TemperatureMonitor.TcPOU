<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.14">
  <POU Name="FB_TemperatureMonitor" Id="{c966e73b-970a-48c9-bfee-5d892dbd2a9a}" SpecialFunc="None">
    <Declaration><![CDATA[// Monitors temperature sensors
FUNCTION_BLOCK FB_TemperatureMonitor
VAR_INPUT
	nTempMonRaw : INT; // Raw signal from the ADC
	bAmphosOn : BOOL; // Whether the Amphos is on
END_VAR
VAR_IN_OUT
	stSetpoints : ST_TemperatureMonitorSetpoints; // Temperature sensor setpoints
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
		pv: TEMP
		io: i
		field: EGU C
		field: LOPR 0.0
		field: HOPR 1000
		field: LSV MINOR
	'}
	fTemperature : LREAL; // Temperature reading in celsius
	{attribute 'pytmc' := '
		pv: ERROR
		io: i
		field: OSV MAJOR
		field: ZSV NO_ALARM
		field: ZNAM OK
		field: ONAM ERROR
	'}
	bError : BOOL; // Whether a temperature event happened. Goes back to normal by itself
END_VAR
VAR_TEMP
	fMonitorVoltage : LREAL; // Voltage calculated from the raw ADC input
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Scale the analog signal to voltage *)
fMonitorVoltage := F_Scale(
	fRawData := nTempMonRaw,
	fRawDataLowerOffLimit := GVL_EL3174.fRawLowerLimit,
	fRawDataUpperOffLimit := GVL_EL3174.fRawUpperLimit,
	fScaleDataLowerOffLimit := GVL_EL3174.fScaleLowerLimit,
	fScaleDataUpperOffLimit := GVL_EL3174.fScaleUpperLimit);

fTemperature := fMonitorVoltage * 100;
	
(* Set error flag if temperature above max allowed and the amphos is on *)
bError := fTemperature > stSetpoints.fMaxTemperature AND bAmphosOn;
]]></ST>
    </Implementation>
    <LineIds Name="FB_TemperatureMonitor">
      <LineId Id="114" Count="0" />
      <LineId Id="73" Count="7" />
      <LineId Id="115" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>