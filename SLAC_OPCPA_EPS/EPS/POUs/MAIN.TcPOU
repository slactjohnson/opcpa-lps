<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.14">
  <POU Name="MAIN" Id="{749355aa-8fe6-4a8e-b863-c3c2acf01034}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	stErrors : ST_ErrorStates; // Keeps track of triggered error states
	fbErrorTriggers : FB_ErrorTriggers; // Creates triggers when new errors are detected
	
	// Leak Monitor
	{attribute 'pytmc' := 'pv: HPO:TTSIM:DEV01'}
	fbTraceTekModbus : FB_TraceTekModbus; // Provides information about leaks through Modbus
	{attribute 'pytmc' := 'pv: HPO:LPS:LEAK:RESET'}
	bLeakMonitorReset : BOOL; // Resets errors on the leak monitor
	{attribute 'pytmc' := 'pv: HPO:LPS:LEAK'}
	fbLeakMonitor : FB_LeakMonitor; // Detects leaks
	
	// Chiller Loop temperature monitors
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMP01'}
	fbChillerLoop01 : FB_ChillerLoop; // Monitors for error events on the chiller loop
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMP02'}
	fbChillerLoop02 : FB_ChillerLoop; // Monitors for error events on the chiller loop
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMP03'}
	fbChillerLoop03 : FB_ChillerLoop; // Monitors for error events on the chiller loop
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMP04'}
	fbChillerLoop04 : FB_ChillerLoop; // Monitors for error events on the chiller loop
	
	// Laser monitors
	{attribute 'pytmc' := 'pv: HPO:LPS:AMPHOS'}
	fbAmphos : FB_Laser; // Monitros the Amphos laser
	{attribute 'pytmc' := '
		pv: HPO:LPS:AMPHOS:RESET
		io: io
	'}
	bAmphosReset : BOOL; // Unlatches the error state of the Amphos
	{attribute 'pytmc' := 'pv: HPO:LPS:OPCPA'}
	fbOpcpa : FB_Laser; // Monitors the OPCPA laser
	{attribute 'pytmc' := '
		pv: HPO:LPS:OPCPA:RESET
		io: io
	'}
	bOpcpaReset : BOOL; // Unlatches the error state of the OPCPA
	
	// Temperature monitors
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON01'}
	fbTempMon01 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON02'}
	fbTempMon02 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON03'}
	fbTempMon03 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON04'}
	fbTempMon04 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON05'}
	fbTempMon05 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON06'}
	fbTempMon06 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON07'}
	fbTempMon07 : FB_TemperatureMonitor; // Monitors system temperature
	{attribute 'pytmc' := 'pv: HPO:LPS:TEMPMON08'}
	fbTempMon08 : FB_TemperatureMonitor; // Monitors system temperature
	
	// Chillers
	{attribute 'pytmc' := 'pv: HPO:LPS:DUMP_CHILLER'}
	fbDumpChiller : FB_DumpChiller; // Flow sensor monitor for the dump chiller
	{attribute 'pytmc' := 'pv: HPO:LPS:BASEPLATE_CHILLER'}
	fbBaseplateChiller : FB_BaseplateChiller; // Flow sensor monitor for the baseplate chiller
	
	// Amphos MRCs
	{attribute 'pytmc' := 'pv: HPO:LPS:AMPHOS_MRC01'}
	fbAmphosMRC01 : FB_AmphosMRC; // Detects problems with the MRC
	{attribute 'pytmc' := 'pv: HPO:LPS:AMPHOS_MRC02'}
	fbAmphosMRC02 : FB_AmphosMRC; // Detects problems with the MRC
	{attribute 'pytmc' := 'pv: HPO:LPS:AMPHOS_MRC03'}
	fbAmphosMRC03 : FB_AmphosMRC; // Detects problems with the MRC
	
	// Diagnostics
	{attribute 'pytmc' := 'pv: HPO:PLC}
	fbDiagnostics : Fb_Diagnostics; // Reports Ethercat and PLC diagnostics
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Feed each device function block inputs from the PLC IO. Collect error states detected
by the function blocks into stErrors. These collected errors are then used later for
making decisions in the interlock logic.
*)

fbLeakMonitor(
	nLocationResistance := fbTraceTekModbus.nLocationResistance,
	bAmphosOn := GVL_IO.bAmphosOn,
	bCarbideOn := GVL_IO.bCarbideOn,
	bLeakDetected := GVL_IO.bLeakDetected,
	stBoundaries := GVL_TraceTek.stLeakMonitorBoundaries,
	bLeakOpticalTableAmphosOn => stErrors.bLeakOpticalTableAmphosOn,
	bLeakOpticaltableNoLaser => stErrors.bLeakOpticalTableNoLaser,
	bLeakOpcpaCarbideOn => stErrors.bLeakOpcpaCarbideOn,
	bLeakUnderTable => stErrors.bLeakUnderTable,
	bLeakInsideRacks => stErrors.bLeakInsideRacks
);

fbChillerLoop01(
	bLoopTempSW := GVL_IO.bLoopTempSW01,
	bError => stErrors.bChillerLoop01
);

fbChillerLoop02(
	bLoopTempSW := GVL_IO.bLoopTempSW02,
	bError => stErrors.bChillerLoop02
);

fbChillerLoop03(
	bLoopTempSW := GVL_IO.bLoopTempSW03,
	bError => stErrors.bChillerLoop03
);

fbChillerLoop04(
	bLoopTempSW := GVL_IO.bLoopTempSW04,
	bError => stErrors.bChillerLoop04
);

fbAmphos(
	nVoltageRaw := GVL_IO.nAmphosVoltageRaw,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_Laser.stAmphosSP,
	bError => stErrors.bAmphosBeam
);
	
fbOpcpa(
	nVoltageRaw := GVL_IO.nOpcpaVoltageRaw,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_Laser.stOpcpaSP,
	bError => stErrors.bOpcpaBeam
);

fbTempMon01(
	nTempMonRaw := GVL_IO.nTempMonRaw01,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP01,
	bError => stErrors.bTempMon01
);
	
fbTempMon02(
	nTempMonRaw := GVL_IO.nTempMonRaw02,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP02,
	bError => stErrors.bTempMon02
);

fbTempMon03(
	nTempMonRaw := GVL_IO.nTempMonRaw03,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP03,
	bError => stErrors.bTempMon03
);
	
fbTempMon04(
	nTempMonRaw := GVL_IO.nTempMonRaw04,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP04,
	bError => stErrors.bTempMon04
);
	
fbTempMon05(
	nTempMonRaw := GVL_IO.nTempMonRaw05,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP05,
	bError => stErrors.bTempMon05
);
	
fbTempMon06(
	nTempMonRaw := GVL_IO.nTempMonRaw06,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP06,
	bError => stErrors.bTempMon06
);
	
fbTempMon07(
	nTempMonRaw := GVL_IO.nTempMonRaw07,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP07,
	bError => stErrors.bTempMon07
);
	
fbTempMon08(
	nTempMonRaw := GVL_IO.nTempMonRaw08,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP08,
	bError => stErrors.bTempMon08
);

fbDumpChiller(
	bAmphosOn := GVL_IO.bAmphosOn,
	bDumpChillerFlow := GVL_IO.bDumpChillerFlow,
	bError => stErrors.bDumpChiller
);

fbBaseplateChiller(
	bBaseplateChillerFlow := GVL_IO.bBaseplateChillerFlow,
	bError => stErrors.bBaseplateChiller
);
	
fbAmphosMRC01(
	bAmphosOn := GVL_IO.bAmphosOn,
	bMRC := GVL_IO.bAmphosMRC01,
	bError => stErrors.bAmphosMRC01
);

fbAmphosMRC02(
	bAmphosOn := GVL_IO.bAmphosOn,
	bMRC := GVL_IO.bAmphosMRC02,
	bError => stErrors.bAmphosMRC02
);

fbAmphosMRC03(
	bAmphosOn := GVL_IO.bAmphosOn,
	bMRC := GVL_IO.bAmphosMRC03,
	bError => stErrors.bAmphosMRC03
);

(*
Now that each of the input signals have been checked and errors stored,
run the interlock logic. By default all output signals are set to their
safe-states and are only turned on if all interlock logic passes.
*)

GVL_IO.bAmphosAttenuatorEnable := F_AmphosAttenuatorEnable(
	bAmphosOn := GVL_IO.bAmphosOn,
	stErrors := stErrors
);

GVL_IO.bAmphosShutterEnable := F_AmphosShutterEnable(
	bAmphosOn := GVL_IO.bAmphosOn,
	fOpcpaVoltage := fbOpcpa.fVoltage,
	bLoopTempOverride01 := fbChillerLoop01.bOperatorOverride,
	bLoopTempOverride02 := fbChillerLoop02.bOperatorOverride,
	bLoopTempOverride03 := fbChillerLoop03.bOperatorOverride,
	bLoopTempOverride04 := fbChillerLoop04.bOperatorOverride,
	stOpcpaSetpoints := GVL_Laser.stOpcpaSP,
	stErrors := stErrors
);
	
GVL_IO.bCarbideShutterEnable := F_CarbideShutterEnable(stErrors := stErrors);
	
GVL_IO.bDumpChillerRelay := F_DumpChillerEnable(stErrors := stErrors);

GVL_IO.bBaseplateChillerRelay := F_BaseplateChillerEnable(stErrors := stErrors);

GVL_IO.bAmphosRelay := F_AmphosEnable(
	fAmphosVoltage := fbAmphos.fVoltage,
	stAmphosSetpoints := GVL_Laser.stAmphosSP,
	stErrors := stErrors
);

(*
Safety related tasks have now been finished. Now try slower tasks such as 
communicating with external hardware.
*)
fbTraceTekModbus(
	nModbusSlaveAddress := GVL_TraceTek.nModbusSlaveAddress,
	bLeakDetected := GVL_IO.bLeakDetected,
	bError => stErrors.bHardwareFailure
);

(*
As per the specification, the reset PV is not checked until after the EPS has taken action.
Check the reset flags to see if they have been set and the errors can be unlatched.
*)

// Check for rising-edge errors
fbErrorTriggers(stErrors := stErrors);

IF fbErrorTriggers.NewLeakError() THEN
	// If there is a new error turn off reset
	bLeakMonitorReset := FALSE;
ELSIF bLeakMonitorReset THEN
	// If there are no new errors and reset is on, reset the errors
	fbLeakMonitor.Reset();
	fbErrorTriggers.ResetLeakTriggers();
END_IF

IF fbErrorTriggers.stNewErrors.bAmphosBeam THEN
	bAmphosReset := FALSE;
ELSIF bAmphosReset THEN
	fbAmphos.Reset();
	fbErrorTriggers.ResetAmphosTrigger();
END_IF

IF fbErrorTriggers.stNewErrors.bOpcpaBeam THEN
	bOpcpaReset := FALSE;
ELSIF bOpcpaReset THEN
	fbOpcpa.Reset();
	fbErrorTriggers.ResetOpcpaTrigger();
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1952" Count="0" />
      <LineId Id="1956" Count="1" />
      <LineId Id="1953" Count="0" />
      <LineId Id="1349" Count="5" />
      <LineId Id="1660" Count="0" />
      <LineId Id="1355" Count="29" />
      <LineId Id="1695" Count="0" />
      <LineId Id="1385" Count="5" />
      <LineId Id="1696" Count="0" />
      <LineId Id="1391" Count="5" />
      <LineId Id="1787" Count="0" />
      <LineId Id="1397" Count="5" />
      <LineId Id="1788" Count="0" />
      <LineId Id="1403" Count="5" />
      <LineId Id="1789" Count="0" />
      <LineId Id="1409" Count="5" />
      <LineId Id="1790" Count="0" />
      <LineId Id="1415" Count="5" />
      <LineId Id="1791" Count="0" />
      <LineId Id="1421" Count="5" />
      <LineId Id="1792" Count="0" />
      <LineId Id="1427" Count="5" />
      <LineId Id="1793" Count="0" />
      <LineId Id="1433" Count="5" />
      <LineId Id="1794" Count="0" />
      <LineId Id="1439" Count="30" />
      <LineId Id="1962" Count="3" />
      <LineId Id="1968" Count="0" />
      <LineId Id="1966" Count="0" />
      <LineId Id="1600" Count="0" />
      <LineId Id="1473" Count="11" />
      <LineId Id="1697" Count="0" />
      <LineId Id="1485" Count="10" />
      <LineId Id="1698" Count="0" />
      <LineId Id="1496" Count="1" />
      <LineId Id="1868" Count="0" />
      <LineId Id="1969" Count="1" />
      <LineId Id="1973" Count="0" />
      <LineId Id="1971" Count="0" />
      <LineId Id="1866" Count="0" />
      <LineId Id="1870" Count="0" />
      <LineId Id="1873" Count="0" />
      <LineId Id="1875" Count="0" />
      <LineId Id="1871" Count="0" />
      <LineId Id="1692" Count="1" />
      <LineId Id="1974" Count="0" />
      <LineId Id="1976" Count="0" />
      <LineId Id="1975" Count="0" />
      <LineId Id="1684" Count="1" />
      <LineId Id="1672" Count="0" />
      <LineId Id="1688" Count="0" />
      <LineId Id="1666" Count="0" />
      <LineId Id="1686" Count="0" />
      <LineId Id="1668" Count="1" />
      <LineId Id="1687" Count="0" />
      <LineId Id="1531" Count="0" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1663" Count="0" />
      <LineId Id="1711" Count="2" />
      <LineId Id="1715" Count="0" />
      <LineId Id="1717" Count="1" />
      <LineId Id="1714" Count="0" />
      <LineId Id="1719" Count="2" />
      <LineId Id="1723" Count="3" />
      <LineId Id="1603" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>