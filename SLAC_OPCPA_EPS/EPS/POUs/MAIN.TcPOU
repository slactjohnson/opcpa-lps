<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="MAIN" Id="{749355aa-8fe6-4a8e-b863-c3c2acf01034}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	stErrors : ST_ErrorStates; // Triggered error states
	fbErrorTriggers : FB_ErrorTriggers; // Brand new errors this cycle
	
	// Leak Monitor
	{attribute 'pytmc' := 'pv: @(BASE):TTSIM:DEV01'}
	fbTraceTekModbus : FB_TraceTekModbus; // Modbus connection to TraceTek
	{attribute 'pytmc' := 'pv: @(BASE):LPS:LEAK:RESET'}
	bLeakMonitorReset : BOOL; // Leak monitor reset flag
	{attribute 'pytmc' := 'pv: @(BASE):LPS:LEAK'}
	fbLeakMonitor : FB_LeakMonitor; // Leak detection
	
	// Chiller Loop temperature monitors
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMP01'}
	fbChillerLoop01 : FB_ChillerLoop; // Chiller loop 01
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMP02'}
	fbChillerLoop02 : FB_ChillerLoop; // Chiller loop 02
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMP03'}
	fbChillerLoop03 : FB_ChillerLoop; // Chiller loop 03
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMP04'}
	fbChillerLoop04 : FB_ChillerLoop; // Chiller loop 04
	
	// Laser monitors
	{attribute 'pytmc' := 'pv: @(BASE):LPS:AMPHOS'}
	fbAmphos : FB_Laser; // Amphos laser
	{attribute 'pytmc' := '
		pv: @(BASE):LPS:AMPHOS:RESET
		io: o
	'}
	bAmphosReset : BOOL; // Amphos laser error unlatch flag
	{attribute 'pytmc' := 'pv: @(BASE):LPS:OPCPA'}
	fbOpcpa : FB_Laser; // OPCPA laser
	{attribute 'pytmc' := '
		pv: @(BASE):LPS:OPCPA:RESET
		io: o
	'}
	bOpcpaReset : BOOL; // OPCPA laser error unlatch flag
	
	
	(*
	// Temperature monitors
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON01'}
	fbTempMon01 : FB_TemperatureMonitor; // System temperature monitor 01
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON02'}
	fbTempMon02 : FB_TemperatureMonitor; // System temperature monitor 02
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON03'}
	fbTempMon03 : FB_TemperatureMonitor; // System temperature monitor 03
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON04'}
	fbTempMon04 : FB_TemperatureMonitor; // System temperature monitor 04
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON05'}
	fbTempMon05 : FB_TemperatureMonitor; // System temperature monitor 05
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON06'}
	fbTempMon06 : FB_TemperatureMonitor; // System temperature monitor 06
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON07'}
	fbTempMon07 : FB_TemperatureMonitor; // System temperature monitor 07
	{attribute 'pytmc' := 'pv: @(BASE):LPS:TEMPMON08'}
	fbTempMon08 : FB_TemperatureMonitor; // System temperature monitor 08
	*)
	
	// Chillers
	{attribute 'pytmc' := 'pv: @(BASE):LPS:DUMP_CHILLER'}
	fbDumpChiller : FB_DumpChiller; // Flow sensor monitor for the dump chiller
	{attribute 'pytmc' := '
		pv: @(BASE):LPS:DUMP_CHILLER:RESET
		io: o
	'}
	bDumpChillerReset : BOOL; // Dump chiller error unlatch flag
	
	{attribute 'pytmc' := 'pv: @(BASE):LPS:BASEPLATE_CHILLER'}
	fbBaseplateChiller : FB_BaseplateChiller; // Flow sensor monitor for the baseplate chiller
	{attribute 'pytmc' := '
		pv: @(BASE):LPS:BASEPLATE_CHILLER:RESET
		io: o
	'}
	bBaseplateChillerReset : BOOL; // Baseplate chiller error unlatch flag
    
    (*
    // Amphos MRCs
	{attribute 'pytmc' := 'pv: @(BASE):LPS:AMPHOS_MRC01'}
	fbAmphosMRC01 : FB_AmphosMRC; // MRC monitor 01
	{attribute 'pytmc' := 'pv: @(BASE):LPS:AMPHOS_MRC02'}
	fbAmphosMRC02 : FB_AmphosMRC; // MRC monitor 02
	{attribute 'pytmc' := 'pv: @(BASE):LPS:AMPHOS_MRC03'}
	fbAmphosMRC03 : FB_AmphosMRC; // MRC monitor 03
	*)
	
	{attribute 'pytmc' := '
		pv: @(BASE):LPS:MASTER_OVERRIDE
		io: o
	'}
	bMasterOverride : BOOL; // Master override control for safety system.
    
	{attribute 'pytmc' := 'pv: @(BASE):LPS:PLC'}
	fbDiag : FB_EcatDiag; // Ethercat diagnostics
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(******************************************************************* 
		Update diagnostics. Check for hardware failures
*******************************************************************)
(* Check PLC hardware for failures *)
fbDiag(AMSNetId := GVL_PLC.AMSNetId);
stErrors.bHardwareFailure := (fbDiag.bError OR fbTraceTekModbus.bError) AND NOT bMasterOverride;

(******************************************************************* 
Feed each device function block inputs from the PLC IO. Collect error states detected
by the function blocks into stErrors. These collected errors are then used later for
making decisions in the interlock logic.
*******************************************************************)
(* Detects leaks using the location resitance from the TraceTek *)
fbLeakMonitor(
	nLocationResistance := fbTraceTekModbus.nLocationResistance,
	bAmphosOn := GVL_IO.bAmphosOn,
	bCarbideOn := GVL_IO.bCarbideOn,
	bLeakDetected := GVL_IO.bLeakDetected,
	stBound := GVL_TraceTek.stLeakMonitorBoundaries,
	bLeakOpticalTableAmphosOn => stErrors.bLeakOpticalTableAmphosOn,
	bLeakOpticaltableNoLaser => stErrors.bLeakOpticalTableNoLaser,
	bLeakOpcpaCarbideOn => stErrors.bLeakOpcpaCarbideOn,
	bLeakUnderTable => stErrors.bLeakUnderTable,
	bLeakInsideRacks => stErrors.bLeakInsideRacks
);

(* Monitors for error events on chiller loop 1 *)
fbChillerLoop01(
	bLoopTempSW := GVL_IO.bLoopTempSW01,
	bError => stErrors.bChillerLoop01
);

(* Monitors for error events on chiller loop 2 *)
fbChillerLoop02(
	bLoopTempSW := GVL_IO.bLoopTempSW02,
	bError => stErrors.bChillerLoop02
);

(* Monitors for error events on chiller loop 3 *)
fbChillerLoop03(
	bLoopTempSW := GVL_IO.bLoopTempSW03,
	bError => stErrors.bChillerLoop03
);

(* Monitors for error events on chiller loop 4 *)
fbChillerLoop04(
	bLoopTempSW := GVL_IO.bLoopTempSW04,
	bError => stErrors.bChillerLoop04
);

(* Monitors the Amphos laser *)
fbAmphos(
	nVoltageRaw := GVL_IO.nAmphosVoltageRaw,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_Laser.stAmphosSP,
	bError => stErrors.bAmphosBeam
);

(* Monitors the OPCPA laser *)
fbOpcpa(
	nVoltageRaw := GVL_IO.nOpcpaVoltageRaw,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_Laser.stOpcpaSP,
	bError => stErrors.bOpcpaBeam
);

(*
(* Monitors system temperature from sensor 1 *)
fbTempMon01(
	nTempMonRaw := GVL_IO.nTempMonRaw01,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP01,
	bError => stErrors.bTempMon01
);

(* Monitors system temperature from sensor 2 *)
fbTempMon02(
	nTempMonRaw := GVL_IO.nTempMonRaw02,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP02,
	bError => stErrors.bTempMon02
);

(* Monitors system temperature from sensor 3 *)
fbTempMon03(
	nTempMonRaw := GVL_IO.nTempMonRaw03,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP03,
	bError => stErrors.bTempMon03
);
	
(* Monitors system temperature from sensor 4 *)
fbTempMon04(
	nTempMonRaw := GVL_IO.nTempMonRaw04,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP04,
	bError => stErrors.bTempMon04
);
	
(* Monitors system temperature from sensor 5 *)
fbTempMon05(
	nTempMonRaw := GVL_IO.nTempMonRaw05,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP05,
	bError => stErrors.bTempMon05
);
	
(* Monitors system temperature from sensor 6 *)
fbTempMon06(
	nTempMonRaw := GVL_IO.nTempMonRaw06,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP06,
	bError => stErrors.bTempMon06
);
	
(* Monitors system temperature from sensor 7 *)
fbTempMon07(
	nTempMonRaw := GVL_IO.nTempMonRaw07,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP07,
	bError => stErrors.bTempMon07
);
	
(* Monitors system temperature from sensor 8 *)
fbTempMon08(
	nTempMonRaw := GVL_IO.nTempMonRaw08,
	bAmphosOn := GVL_IO.bAmphosOn,
	stSetpoints := GVL_TemperatureMonitor.stTempMonSP08,
	bError => stErrors.bTempMon08
);
*)

(* Flow sensor monitor for the dump chiller *)
fbDumpChiller(
	bAmphosOn := GVL_IO.bAmphosOn,
	bDumpChillerFlow := GVL_IO.bDumpChillerFlow,
	bError => stErrors.bDumpChiller
);

(* Flow sensor monitor for the baseplate chiller *)
fbBaseplateChiller(
	bBaseplateChillerFlow := GVL_IO.bBaseplateChillerFlow,
	bError => stErrors.bBaseplateChiller
);
	
(*
(* Detects problems with MRC 1 *)
fbAmphosMRC01(
	bAmphosOn := GVL_IO.bAmphosOn,
	bMRC := GVL_IO.bAmphosMRC01,
	bError => stErrors.bAmphosMRC01
);

(* Detects problems with MRC 2 *)
fbAmphosMRC02(
	bAmphosOn := GVL_IO.bAmphosOn,
	bMRC := GVL_IO.bAmphosMRC02,
	bError => stErrors.bAmphosMRC02
);

(* Detects problems with MRC 3 *)
fbAmphosMRC03(
	bAmphosOn := GVL_IO.bAmphosOn,
	bMRC := GVL_IO.bAmphosMRC03,
	bError => stErrors.bAmphosMRC03
);
*)

(******************************************************************* 
Now that each of the input signals have been checked and errors stored,
run the interlock logic.
*******************************************************************)
(* Enable Amphos attenuator if interlock logic passes *)
(*
GVL_IO.bAmphosAttenuatorEnable := F_AmphosAttenuatorEnable(
	bAmphosOn := GVL_IO.bAmphosOn,
	stErrors := stErrors
);
Deprecated Logic -- Not Currently Used*)

(* Enable Amphos shutter if interlock logic passes *)
GVL_IO.bAmphosShutterEnable := F_AmphosShutterEnable(
	bAmphosOn := GVL_IO.bAmphosOn,
	fOpcpaVoltage := fbOpcpa.fVoltage,
	bLoopTempOverride01 := fbChillerLoop01.bOperatorOverride,
	bLoopTempOverride02 := fbChillerLoop02.bOperatorOverride,
	bLoopTempOverride03 := fbChillerLoop03.bOperatorOverride,
	bLoopTempOverride04 := fbChillerLoop04.bOperatorOverride,
	stOpcpaSetpoints := GVL_Laser.stOpcpaSP,
	stErrors := stErrors,
	bMasterOverride := bMasterOverride
);
	
(* Enable Carbide shutter if interlock logic passes *)
GVL_IO.bCarbideShutterEnable := F_CarbideShutterEnable(
	stErrors := stErrors,
	bMasterOverride := bMasterOverride
);
	
(* Enable Dump chiller if interlock logic passes *)
GVL_IO.bDumpChillerRelay := F_DumpChillerEnable(
	stErrors := stErrors,
	bMasterOverride := bMasterOverride
);

(* Enable Baseplate chiller if interlock logic passes *)
GVL_IO.bBaseplateChillerRelay := F_BaseplateChillerEnable(
	stErrors := stErrors,
	bMasterOverride := bMasterOverride
);

(* Enable Amphos if interlock logic passes *)
GVL_IO.bAmphosRelay := F_AmphosEnable(
	fAmphosVoltage := fbAmphos.fVoltage,
	bEnabled := GVL_IO.bAmphosRelay,
	stAmphosSetpoints := GVL_Laser.stAmphosSP,
	stErrors := stErrors,
	bMasterOverride := bMasterOverride
);

(******************************************************************* 
Safety related tasks have now been finished. Now try slower tasks such as 
communicating with external hardware.
*******************************************************************)
(* Read from TraceTek hardware to get leak details. Errors are 
handled later when diagnostics are run *)
fbTraceTekModbus(
	nModbusSlaveAddress := GVL_TraceTek.nModbusSlaveAddress,
	bLeakDetected := GVL_IO.bLeakDetected
);

(******************************************************************* 
As per the specification, the reset PV is not checked until after the EPS has taken action.
Check the reset flags to see if they have been set and the errors can be unlatched.
*******************************************************************)
(* Check for rising-edge errors *)
fbErrorTriggers(stErrors := stErrors, nLeakLocations := fbLeakMonitor.nLeakLocations);

(* Check for new leak errors *)
IF fbErrorTriggers.NewLeakError() THEN
	bLeakMonitorReset := FALSE; // If there is a new error turn off reset
ELSIF bLeakMonitorReset THEN
	// If there are no new errors and reset is on, reset the errors
	fbLeakMonitor.Reset();
	fbErrorTriggers.ResetLeakTriggers();
END_IF

(* Check for new Amphos beam errors *)
IF fbErrorTriggers.stNewErrors.bAmphosBeam THEN
	bAmphosReset := FALSE; // If there is a new error turn off reset
ELSIF bAmphosReset THEN
	// If there are no new errors and reset is on, reset the errors
	fbAmphos.Reset();
	fbErrorTriggers.ResetAmphosTrigger();
END_IF

(* Check for new OPCPA errors *)
IF fbErrorTriggers.stNewErrors.bOpcpaBeam THEN
	bOpcpaReset := FALSE; // If there is a new error turn off reset
ELSIF bOpcpaReset THEN
	// If there are no new errors and reset is on, reset the errors
	fbOpcpa.Reset();
	fbErrorTriggers.ResetOpcpaTrigger();
END_IF

(* Check for new Beam Dump chiller errors *)
IF fbErrorTriggers.stNewErrors.bDumpChiller THEN
	bDumpChillerReset := FALSE; // If there is a new error turn off reset
ELSIF bDumpChillerReset THEN
	fbDumpChiller.Reset();
	fbErrorTriggers.ResetDumpChillerTrigger();
END_IF

(* Check for new Baseplate chiller errors *)
IF fbErrorTriggers.stNewErrors.bBaseplateChiller THEN
	bBaseplateChillerReset := FALSE; // If there is a new error turn off reset
ELSIF bBaseplateChillerReset THEN
	// If there are no new errors and reset is on, reset the errors
	fbBaseplateChiller.Reset();
	fbErrorTriggers.ResetBaseplateChillerTrigger();
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>